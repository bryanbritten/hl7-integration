services:
  kafka:
    build:
      context: ./docker/broker
    container_name: kafka
    env_file:
      - .env
    ports:
      - "19092:19092"
    restart: on-failure
    healthcheck:
      test: [ "CMD", "bash", "-c", "/opt/kafka/bin/kafka-topics.sh --bootstrap-server localhost:9092 --list >/dev/null 2>&1" ]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
  kafka-init:
    build:
      context: ./docker/broker
    depends_on:
      kafka:
        condition: service_started
    volumes:
      - ./docker/broker/init-topics.sh:/init-topics.sh
    entrypoint: [ "/bin/bash", "init-topics.sh" ]
  minio:
    build:
      context: ./docker/storage/minio
    container_name: minio
    env_file:
      - .env
    command: [ "server", "/data", "--console-address", ":${MINIO_CONSOLE_PORT}" ]
    ports:
      - "${MINIO_API_PORT}:${MINIO_API_PORT}"
      - "${MINIO_CONSOLE_PORT}:${MINIO_CONSOLE_PORT}"
    restart: on-failure
    healthcheck:
      test: [ "CMD", "mc", "ready", "local" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
  minio-client:
    build:
      context: ./docker/storage/minio-client
    container_name: minio-client
    env_file:
      - .env
    depends_on:
      minio:
        condition: service_healthy
    restart: no
  producer:
    build:
      context: .
      dockerfile: docker/producer/Dockerfile
    container_name: producer
    env_file:
      - .env
    depends_on:
      kafka:
        condition: service_healthy
      kafka-init:
        condition: service_completed_successfully
    restart: on-failure
    healthcheck:
      test: [ "CMD", "bash", "-c", "echo ruok | nc -w 2 localhost 2181 | grep imok" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
  consumer:
    build:
      context: .
      dockerfile: docker/consumer/Dockerfile
    container_name: consumer
    env_file:
      - .env
    depends_on:
      kafka:
        condition: service_healthy
      kafka-init:
        condition: service_completed_successfully
      minio:
        condition: service_healthy
      minio-client:
        condition: service_completed_successfully
    restart: on-failure
    healthcheck:
      test: [ "CMD", "pgrep", "-f", "consumer.py" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
  qa:
    build:
      context: .
      dockerfile: docker/qa/Dockerfile
    container_name: qa
    env_file:
      - .env
    depends_on:
      kafka:
        condition: service_healthy
      kafka-init:
        condition: service_completed_successfully
    restart: on-failure
    healthcheck:
      test: [ "CMD", "pgrep", "-f", "qa.py" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
  fhir-converter:
    build:
      context: ./docker/fhir-converter
    container_name: fhir-converter
    env_file:
      - .env
    restart: on-failure
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/health/check" ]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
  transformer:
    build:
      context: .
      dockerfile: docker/transformer/Dockerfile
    container_name: transformer
    env_file:
      - .env
    depends_on:
      minio:
        condition: service_healthy
      minio-client:
        condition: service_completed_successfully
      kafka:
        condition: service_healthy
      kafka-init:
        condition: service_completed_successfully
      fhir-converter:
        condition: service_healthy
    restart: on-failure
    healthcheck:
      test: [ "CMD", "pgrep", "-f", "transformer.py" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
  prometheus:
    build:
      context: ./docker/monitor/prometheus
    container_name: prometheus
    env_file:
      - .env
    ports:
      - "9090:9090"
    restart: on-failure
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9090" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
  grafana:
    build:
      context: ./docker/monitor/grafana
    container_name: grafana
    env_file:
      - .env
    ports:
      - "3000:3000"
    restart: on-failure
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:3000" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
