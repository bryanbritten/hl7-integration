services:
  producer:
    build:
      context: .
      dockerfile: docker/producer/Dockerfile
    container_name: producer
    env_file:
      - .env
    depends_on:
      - consumer
    restart: on-failure
    healthcheck:
      test: [ "CMD", "pgrap", "-f", "producer.py" ]
      interval: 5m
      timeout: 5s
      retries: 5
      start_period: 30s
  consumer:
    build:
      context: .
      dockerfile: docker/consumer/Dockerfile
    container_name: consumer
    env_file:
      - .env
    depends_on:
      - minio
    ports:
      - "2575:2575"
    restart: on-failure
    healthcheck:
      test: [ "CMD", "pgrep", "-f", "consumer.py" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
  minio:
    build:
      context: ./docker/storage/minio
    container_name: minio
    env_file:
      - .env
    command: [ "server", "/data", "--console-address", ":${MINIO_CONSOLE_PORT}" ]
    ports:
      - "${MINIO_API_PORT}:${MINIO_API_PORT}"
      - "${MINIO_CONSOLE_PORT}:${MINIO_CONSOLE_PORT}"
    volumes:
      - minio-data:/data
    restart: on-failure
  minio-client:
    build:
      context: ./docker/storage/minio-client
    container_name: minio-client
    env_file:
      - .env
    depends_on:
      - minio
    restart: on-failure
  validator:
    build:
      context: .
      dockerfile: docker/validator/Dockerfile
    container_name: validator
    env_file:
      - .env
    depends_on:
      - minio
    restart: on-failure
    healthcheck:
      test: [ "CMD", "pgrep", "-f", "validator.py" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
  fhir-converter:
    build:
      context: ./docker/fhir-converter
    container_name: fhir-converter
    env_file:
      - .env
    restart: on-failure
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/health/check" ]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
  transformer:
    build:
      context: .
      dockerfile: docker/transformer/Dockerfile
    container_name: transformer
    env_file:
      - .env
    depends_on:
      - minio
      - fhir-converter
    restart: on-failure
    healthcheck:
      test: [ "CMD", "pgrep", "-f", "transformer.py" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
  prometheus:
    build:
      context: ./docker/monitor/prometheus
    container_name: prometheus
    env_file:
      - .env
    ports:
      - "9090:9090"
    restart: on-failure
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9090" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
  grafana:
    build:
      context: ./docker/monitor/grafana
    container_name: grafana
    env_file:
      - .env
    ports:
      - "3000:3000"
    restart: on-failure
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:3000" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
volumes:
  minio-data:
